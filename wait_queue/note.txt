사이트 접속 대기열 구현
대기열 토큰 발급 요청
최대 동시 접속자수 이하가 되면 대기열에 있는 사람들 한 명씩 접속 가능
내 순번이 되어 토큰이 유효 상태가 되면 서버 API들 이용 가능
대기중 → 유효로 바뀐 이후, 특정 시간이 지나면 토큰은 만료됨 (이용 제한시간)
Redis 인메모리에 토큰의 상태정보 저장.
Redis를 메시지큐로 활용하여 순번 관리
내 순서가 되었음을 어떻게 알지? → Polling 또는 WebSocket 사용
적용 가능한 패턴
State Pattern: 대기중 → 유효 → 만료 상태 전이
Strategy Pattern: 다양한 대기열 전략 (선착순, 우선순위 기반 등)
Observer Pattern: 순서 도착 시 사용자에게 알림 전송(이벤트 기반)
클린 아키텍처로 구현 (편집됨) 

--------------------------------------------------------------------------------------------------------
REDIS
op1. wsl 에서 백그라운드 서비스로 서버 실행 (로컬 개발/테스트.  단일서버) sudo apt install redis-server
    => wsl 과 연결이 안됨. docker 에서 redis 이미지로 실행. localhost 로 접속
    => 추후 리눅스에서 서버를 띄울때는 로컬로 redis-server 사용

op2. redis.io redis 클라우드  (서버 스케일아웃시)

이번 예제에서는 wsl 로

사용 pip 패키지
- redis : 공식 asyncio 클라이언트
- redis-om (object mapper) : ORM ODM. 문서 엔티티 모델구조 같은 고수준 추상화 도구. (이번 예제에서는 불필요)

프로젝트 관련 기술 조사
-> 유효토큰 리스트 sadd / SCARD   : 접속토큰 보관. (집계용)
-> 접속자 수 카운트 : 접속자 리스트 업데이트 될때마다 같이 계산. (INCR / SET)
                    주기적으로 접속자 리스트 길이 확인해서 유효성 검토

-> 우선순위 큐 : zadd : sorted set (score 값 기준으로 큐 구현. 점수는 시간으로 해서 FIFO)  
-> 일반 FIFO 큐 : RPUSH / LPOP. 

-> TTL 처리용 키 EXPIRE 활용
-> 만료 감지용 Keyspace Notification 설정
---------------------------------------------------------------------------------------------------------
api
- token.py
    - 토큰 관련 엔드포인트
    - 토큰 신청. 
- ws.py
    - 웹소켓 관련 엔드포인트
    - 옵저버에 웹소켓+토큰 넘겨서 사용자 대기열 등록
repository
- redis_repo.py
    - 싱글톤 패턴으로 구현 
    - redis 인스턴스 반환

services
- db_service.py
    - 대기열큐 (Strategy Pattern) 로직 캡슐화
        - FIFO >>> rpush, lpop. (list)
        - Priority >>> zadd, zrange, zrem  (sorted set)
    - 사용자리스트
        - set   >>> sadd, srem, sismember, smembers, scard
    - db서비스
        - 토큰 생성, 사용자 대기열에서 사용자리스트로 .

- monitor.py
    - redis TTL 모니터링 pub/sub 
    - TTL 감지 및 접속자수 -1
    - 주기적으로 접속자수 검증
- observer.py
    - 대기열 사용자에게 토큰과 웹소켓을 받아 딕셔너리로 저장
    - 대기순번 get (polling)
    - 대기열 push pop (dbservice)

------------------------ 테스트 작성 ---------------------------------
루트 디렉토리에 tests
각 tests 하위 디렉토리에 __init__.py 
pytest => 테스트 라이브러리
pytest-asyncio 비동기 테스트용
fakeredis[asyncio] 목레디스

부하테스트
locust  툴 사용
- python 기반 부하 테스트 도구
https://docs.locust.io/en/stable/installation.html


